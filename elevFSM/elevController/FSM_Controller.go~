package FSM_controller

import(
	. "./elevDrivers"
	"time"
)

const (
	IDLE = 0
	DRIVING = 1
	DOOR_TIMER = 2

	NONE = 0
	FLOOR_ARRIVAL = 1
	NEW_ORDER = 2
	TIMER_TIMEOUT = 3
)


func FSM_setup_elevator(){
	Elev_init()
	Elev_set_motor_direction(DIRN_DOWN)
	for{
		if (Elev_get_floor_sensor_signal() != -1){
			Elev_set_motor_direction(DIRN_STOP)
			break
		}
	}
}

func FSM_create_elevator() Elevator{
	Elevator := Elevator{STATE: IDLE, CURRENT_FLOOR: Elev_get_floor_sensor_signal(), DESTINATION_FLOOR: Elev_get_floor_sensor_signal(), DIRECTION: DIRN_STOP}
	return Elevator
}

func FSM_Start_Driving(NewObjective Button, Elevator Elevator, Destination_Chan chan int, State_Chan chan int, Motor_Direction_Chan chan int, Floor_Arrival_Chan chan int){
	Destination_Chan <- NewObjective.Floor
	if Elevator.CURRENT_FLOOR > NewObjective.Floor{
		Elev_set_motor_direction(-1)
		Motor_Direction_Chan <- -1
		State_Chan <- DRIVING
	}
	if Elevator.CURRENT_FLOOR < NewObjective.Floor{
		Elev_set_motor_direction(1)
		Motor_Direction_Chan <- 1
		State_Chan <- DRIVING
	}
	if Elevator.CURRENT_FLOOR == NewObjective.Floor{
		Floor_Arrival_Chan <- Elevator.CURRENT_FLOOR
	}
}

func FSM_objective_dealer(Elevator Elevator, Destination_Chan chan int, Objective_Chan chan Button){
	for{
		if Elevator.STATE == IDLE{
			nextOrder := Next_order()
			Objective_Chan <- nextOrder
		}
	}
}

func FSM_elevator_updater(Elevator Elevator, Motor_Direction_Chan chan int, Floor_Arrival_Chan chan int, Destination_Chan chan int, State_Chan chan int) {
	for{
		select{
			case NewDirection := <- 						Motor_Direction_Chan:
				Elevator.DIRECTION = NewDirection
			case NewFloor := <- 							Floor_Arrival_Chan:
				Elevator.CURRENT_FLOOR = NewFloor
			case NewDestination := <- 						Destination_Chan:
				Elevator.DESTINATION_FLOOR = NewDestination
			case NewState := <- 							State_Chan:
				Elevator.STATE = NewState
		}
	}	
}

func FSM_floor_tracker(Elevator Elevator, Floor_Arrival_Chan chan int){
	for{
		if Elev_get_floor_sensor_signal() != -1 && Elev_get_floor_sensor_signal() != Elevator.CURRENT_FLOOR{
			NewFloor := Elev_get_floor_sensor_signal()
			Floor_Arrival_Chan <- NewFloor
		}
	}
}

func FSM_sensor_pooler(Button_Press_Chan chan Button){
	for{
		for button := B_UP; button <= B_COMMAND; button++ {
			for floor:= 0; floor < N_FLOORS; floor++{
				if button == B_UP && floor == N_FLOORS-1 { continue }
				if button == B_DOWN && floor == 0 { continue }
				button_signal := Elev_get_button_signal(button, floor);
				if button_signal == 1 {
					Button_Press_Chan <- Button{Button_type : button, Floor : floor}
				}
			}
		}
		time.Sleep(time.Millisecond*100)
	}
}
